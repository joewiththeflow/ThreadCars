import java.util.ArrayList;

// Abstract class which other Generators such as VehcileGenerator will extend
// An important aspect of this class is that it can rotate a GridSquare[][] grid
// using the setOrientation() method. This could be useful for generated objects
// in that regardless of their initial orientation e.g. N, S, E, W, the grid is 
// arranged in the same way, meaning that generated objects could use the same
// logic to 'move forward' or even 'turn left' for example.
public abstract class Generator {

	//private instance variables
	private String symbol;
	private char direction;
	private GridSquare[][] gridSquareArray;
	private int[] rowsOrColumns;
	private int minSpeed;
	private int maxSpeed;
	private int minGenerationSpeed;
	private int maxGenerationSpeed; 
	private ArrayList<Double> travelTimes = new ArrayList<Double>();
	private String name;
	
	//--------Getters----------//
	
	// return String symbol for the objects generated by this class
	public String getSymbol() {
		return this.symbol;
	}
	
	// return char direction that objects generated will initially be facing towards
	public char getDirection() {
		return this.direction;
	}
	
	// return GridSquare [][] gridSquareArray representing 2d array of GridSquares
	public GridSquare[][] getGridSquareArray() {
		return this.gridSquareArray;
	}
	
	// return integer array of rows or columns depending on direction
	public int[] getRowsOrColumns() {
		return this.rowsOrColumns;
	}
	
	// return int minSpeed representing minimum possible delay (speed) of object
	public int getMinSpeed() {
		return this.minSpeed;
	}
	
	// return int maxSpeed representing maximum possible delay (speed) of object
	public int getMaxSpeed() {
		return this.maxSpeed;
	}
	
	// return int minGenerationSpeed representing the min speed (delay) between generating new objects
	public int getMinGenerationSpeed() {
		return this.minGenerationSpeed;
	}
	
	// return int maxGenerationSpeed representing the max speed (delay) between generating new objects
	public int getMaxGenerationSpeed() {
		return this.maxGenerationSpeed;
	}
	
	// return ArrayList<Double> travelTimes representing the times taken by objects to
	// perhaps perform a certain task such as travelling across grid
	public ArrayList<Double> getTravelTimes() {
		return this.travelTimes;
	}
	
	// return String name representing the name of a generator
	public String getName() {
		return this.name;
	}
	
	//-----------------------------------//
	
	
	
	//------------Setters----------------//
	
	// set the String symbol representing the name of the Generator
	public void setSymbol(String symbol) {
		this.symbol = symbol;
	}
	
	// set the char direction generated objects will face in initially
	public void setDirection(char direction) {
		this.direction = direction;
	}
	
	// set the GridSquare[][] gridSquareArray that will be used by the generator
	public void setGridSquareArray(GridSquare[][] gridSquareArray) {
		this.gridSquareArray = gridSquareArray;
	}
	
	// set the integer array rowsOrColumns of specific rows (or columns depending on direction)
	public void setRowsOrColumns(int[] rowsOrColumns) {
		this.rowsOrColumns = rowsOrColumns;
	}
	
	// set the rowsOrColums integer array to all rows (or columns depending on direction)
	public void setRowsOrColumns() {
		int[] rowsOrColumns = new int[this.gridSquareArray.length];
		for (int i = 0; i < rowsOrColumns.length; i++) {
			//add 1 due to zero-based indexing
			rowsOrColumns[i] = i+1;
		}
		this.rowsOrColumns = rowsOrColumns;
	}
	
	// set int minSpeed representing minimum possible delay for a generated object  
	public void setMinSpeed(int speed) {
		this.minSpeed = speed;
	}
	
	// set int maxSpeed representing maximum possible delay for a generated object
	public void setMaxSpeed(int speed) {
		this.maxSpeed = speed;
	}
	
	// set int minGenerationSpeed representing the min delay (speed) between generating new objects
	public void setMinGenerationSpeed(int speed) {
		this.minGenerationSpeed = speed;
	}
		
	// set int maxGenerationSpeed representing the max delay (speed) between generating new objects
	public void setMaxGenerationSpeed(int speed) {
		this.maxGenerationSpeed = speed;
	}
	
	// set ArrayList<Double> travelTimes
	public void setTravelTimes(ArrayList<Double> travelTimes) {
		this.travelTimes = travelTimes;
	}
	// set String name for the Generator
	public void setName(String name) {
		this.name = name;
	}
	
	//----------------------------------//
	
	
	
	//-------------Abstract Methods------------//
	
	public abstract void run();
		
	//-----------------------------------------//
	
	
	
	// A method to set the orientation of the GridSquare[][] grid using the GridMaker class
	// The orientation is changed depending on direction
	// The grid is oriented so that objects' initial facing direction will be towards the East from the object's perspective
	public void setGridOrientation(char direction) {
		if(direction == 'N' || direction == 'n') { //objects facing north - travelling from South to North
			this.gridSquareArray = GridMaker.turnGridAntiClockwise(gridSquareArray, 3);
		}
		if(direction == 'W' || direction == 'w') { //objects facing west - travelling from East to West
			this.gridSquareArray = GridMaker.turnGridAntiClockwise(gridSquareArray, 2);
		}
		if(direction == 'S' || direction == 's') { //objects facing south - travelling from North to South
			this.gridSquareArray = GridMaker.turnGridAntiClockwise(gridSquareArray, 1);
		}
	}
	
	// A method to randomly select and return a zero-based row number (of possibly rotated grid) to generate an object in
	public int startRow(char direction) {
		// number of rows
		int numOfRows = this.rowsOrColumns.length;
		// get a random number between 0 and 1 less than the number of values in numOfRows
		int selectedIndex = (int) (Math.random() * numOfRows);
		if(direction == 'S' || direction == 's' || direction == 'W' || direction == 'w') {
			// need to return the reverse row number due to grid turning
			return (gridSquareArray.length - this.rowsOrColumns[selectedIndex]) + 1;
		}
		else {
			return this.rowsOrColumns[selectedIndex];
		}
	}
	
	// A method to change the possible distribution of generated object speeds (delays)
	public void changeSpeedRange(int minSpeed, int maxSpeed) {
		this.minSpeed = minSpeed;
		this.maxSpeed = maxSpeed;
	}
	
	// A method to change the possible distribution of speed (delays) between generating new objects
	public void changeGenerationSpeedRange(int minSpeed, int maxSpeed) {
		this.minGenerationSpeed = minSpeed;
		this.maxGenerationSpeed = maxSpeed;
	}
	
	// A method to select and return a random speed (delay) in the range between minSpeed and maxSpeed
	public int speed() {
		int speed = (int) (Math.random() * ((this.maxSpeed - this.minSpeed) + 1) + this.minSpeed);
		return speed;
	}
	
	// A method to select and return a random speed (delay) in the range between minSpeed and maxSpeed
	public int generationSpeed() {
		int speed = (int) (Math.random() * ((this.maxGenerationSpeed - this.minGenerationSpeed) + 1) + this.minGenerationSpeed);
		return speed;
	}
	
	// A method to add a double value representing a time taken, to the list of travelTimes 
	public void addTimeTaken(double time) {
		this.travelTimes.add(time);
	}
	
	
}
